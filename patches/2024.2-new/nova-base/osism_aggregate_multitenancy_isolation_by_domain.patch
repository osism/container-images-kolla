--- /var/lib/kolla/venv/lib/python3/site-packages/nova/api/openstack/identity.py
+++ /var/lib/kolla/venv/lib/python3/site-packages/nova/api/openstack/identity.py
@@ -13,14 +13,20 @@
 # under the License.
 
 from keystoneauth1 import exceptions as kse
+from keystoneauth1 import loading as ks_loading
 from oslo_log import log as logging
 import webob
 
+import nova.conf
 from nova.i18n import _
+from nova import service_auth
 from nova import utils
 
 
 LOG = logging.getLogger(__name__)
+CONF = nova.conf.CONF
+
+NEUTRON_GROUP = nova.conf.neutron.neutron_group
 
 
 def verify_project_id(context, project_id):
@@ -79,3 +85,67 @@ def verify_project_id(context, project_id):
              "content": resp.content})
         # realize we did something wrong, but move on with a warning
         return True
+
+
+def get_domain(project_id):
+    """get domain details of a project by a project_id
+
+    If it does not, an HTTPBadRequest is emitted. Also HTTPBadRequest
+    is emitted if Keystone identity service version 3.0 is not found.
+
+    """
+
+    auth_plugin = ks_loading.load_auth_from_conf_options(CONF,
+                                                         NEUTRON_GROUP.name)
+
+    adap = utils.get_ksa_adapter(
+        'identity', ksa_auth=auth_plugin,
+        min_version=(3, 0), max_version=(3, 'latest'))
+
+    try:
+        resp = adap.get('/projects/%s' % project_id)
+        data = resp.json()
+        domain_id = data["project"]["domain_id"]
+        resp = adap.get('/domains/%s' % domain_id)
+        data = resp.json()
+    except kse.EndpointNotFound:
+        LOG.error(
+            "Keystone identity service version 3.0 was not found. This "
+            "might be caused by Nova misconfiguration or Keystone "
+            "problems.")
+        msg = _("Nova was unable to find Keystone service endpoint.")
+        # TODO(astupnik). It may be reasonable to switch to HTTP 503
+        # (HTTP Service Unavailable) instead of HTTP Bad Request here.
+        # If proper Keystone servie is inaccessible, then technially
+        # this is a server side error and not an error in Nova.
+        raise webob.exc.HTTPBadRequest(explanation=msg)
+    except kse.ClientException:
+        # something is wrong, like there isn't a keystone v3 endpoint,
+        # or nova isn't configured for the interface to talk to it;
+        # we'll take the pass and default to everything being ok.
+        LOG.info("Unable to contact keystone to verify project_id")
+        return None
+
+    if resp:
+        return data["domain"]
+    elif resp.status_code == 404:
+        # we got access, and we know this project is not there
+        msg = _("Project ID %s is not a valid project.") % project_id
+        raise webob.exc.HTTPBadRequest(explanation=msg)
+    elif resp.status_code == 403:
+        # we don't have enough permission to verify this, so default
+        # to "it's ok".
+        LOG.info(
+            "Insufficient permissions for user %(user)s to verify "
+            "existence of project_id %(pid)s",
+            {"user": context.user_id, "pid": project_id})
+        return None
+    else:
+        LOG.warning(
+            "Unexpected response from keystone trying to "
+            "verify project_id %(pid)s - resp: %(code)s %(content)s",
+            {"pid": project_id,
+             "code": resp.status_code,
+             "content": resp.content})
+        # realize we did something wrong, but move on with a warning
+        return None
--- /dev/null
+++ b/nova/scheduler/filters/osism_aggregate_multitenancy_isolation_by_domain.py
@@ -0,0 +1,66 @@
+# Copyright (c) 2011-2013 OpenStack Foundation
+# Copyright (c) 2023 OSISM GmbH
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+from oslo_log import log as logging
+
+from nova.api.openstack import identity
+from nova.scheduler import filters
+from nova.scheduler.filters import utils
+
+
+LOG = logging.getLogger(__name__)
+
+
+class OsismAggregateMultiTenancyIsolationByDomain(filters.BaseHostFilter):
+    """Isolate domains in specific aggregates."""
+
+    # Aggregate data and domains do not change within a request
+    run_filter_once_per_request = True
+
+    RUN_ON_REBUILD = False
+
+    def host_passes(self, host_state, spec_obj):
+        """If a host is in an aggregate that has the metadata key
+        "filter_domain_id" it can only create instances from that domain(s).
+        A host can be in different aggregates.
+
+        If a host doesn't belong to an aggregate with the metadata key
+        "filter_domain_id" it can create instances from all domains.
+        """
+
+        domain = identity.get_domain(spec_obj.project_id)
+        domain_id = domain["id"]
+        domain_description = domain["description"]
+        metadata = utils.aggregate_metadata_get_by_host(host_state,
+                                                        key="filter_domain_id")
+
+        if metadata != {}:
+            configured_domain_ids = metadata.get("filter_domain_id")
+            if configured_domain_ids:
+                if domain_id not in configured_domain_ids:
+                    LOG.debug("%s fails domain id on aggregate", host_state)
+                    return False
+                LOG.debug("Host domain id %s matched", domain_id)
+            else:
+                if "BYOC" in domain_description:
+                    LOG.debug("No domain id's defined on host. Host fails because of BYOC.")
+                    return False
+                else:
+                    LOG.debug("No domain id's defined on host. Host passes.")
+        elif "BYOC" in domain_description:
+            LOG.debug("No domain id's defined on host. Host fails because of BYOC.")
+            return False
+        return True
