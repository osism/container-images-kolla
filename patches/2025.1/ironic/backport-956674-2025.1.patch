commit 2d7da1c7ef5f6fd20b79afcf984a3eb8cdb225ba
Author: Afonne-CID <afonnepaulc@gmail.com>
Date:   Wed Aug 6 15:06:42 2025 +0100

    Handle race conditions in power state changes
    
    Fix race condition where Redfish power commands fail with
    BadRequestError when hardware reaches desired state between Ironic's
    state check and command execution. Now verifies actual power state on
    exception and treats as success if already in target state.
    
    Closes-Bug: #2119423
    Change-Id: I46f84318ae28498901000283bef49c46260f80ea
    Signed-off-by: Afonne-CID <afonnepaulc@gmail.com>
    (cherry picked from commit 8244e27e097ab7b929ee95efb06419ddfaf6a310)

diff --git a/ironic/drivers/modules/redfish/power.py b/ironic/drivers/modules/redfish/power.py
index c5f007941..b3833b666 100644
--- a/ironic/drivers/modules/redfish/power.py
+++ b/ironic/drivers/modules/redfish/power.py
@@ -123,6 +123,20 @@ class RedfishPower(base.PowerInterface):
 
         try:
             _set_power_state(task, system, power_state, timeout=timeout)
+        except sushy.exceptions.BadRequestError as e:
+
+            target_state = TARGET_STATE_MAP.get(power_state, power_state)
+            current_state = self.get_power_state(task)
+
+            if current_state == target_state:
+                LOG.info('Node %(node)s power operation (%(requested)s) '
+                         'failed with BadRequest, but node is already in '
+                         'the expected final state (%(final)s). Treating '
+                         'as successful. Error was: %(error)s',
+                         {'node': task.node.uuid, 'requested': power_state,
+                          'final': target_state, 'error': e})
+                return  # Success - already in desired final state
+            raise
         except sushy.exceptions.SushyError as e:
             error_msg = (_('Setting power state to %(state)s failed for node '
                            '%(node)s. Error: %(error)s') %
diff --git a/ironic/tests/unit/drivers/modules/redfish/test_power.py b/ironic/tests/unit/drivers/modules/redfish/test_power.py
index 3e0b06a2e..d5cca3a95 100644
--- a/ironic/tests/unit/drivers/modules/redfish/test_power.py
+++ b/ironic/tests/unit/drivers/modules/redfish/test_power.py
@@ -176,6 +176,67 @@ class RedfishPowerTestCase(db_base.DbTestCase):
                 sushy.RESET_ON)
             mock_get_system.assert_called_once_with(task.node)
 
+    @mock.patch.object(redfish_power.RedfishPower, 'get_power_state',
+                       autospec=True)
+    @mock.patch.object(redfish_utils, 'get_system', autospec=True)
+    def test_set_power_state_race_condition_handling(
+            self, mock_get_system, mock_get_power_state):
+
+        fake_system = mock_get_system.return_value
+        fake_system.reset_system.side_effect = (
+            sushy.exceptions.BadRequestError(
+                method='POST', url='test',
+                response=mock.Mock(status_code=400)))
+
+        success_scenarios = [
+            (
+                states.SOFT_POWER_OFF,
+                states.POWER_OFF,
+                sushy.RESET_GRACEFUL_SHUTDOWN,
+            ),
+            (
+                states.SOFT_REBOOT,
+                states.POWER_ON,
+                sushy.RESET_GRACEFUL_RESTART
+            ),
+            (states.POWER_OFF, states.POWER_OFF, sushy.RESET_FORCE_OFF),
+            (states.POWER_ON, states.POWER_ON, sushy.RESET_ON),
+            (states.REBOOT, states.POWER_ON, sushy.RESET_FORCE_RESTART),
+        ]
+
+        failure_scenarios = [
+            (states.POWER_OFF, states.POWER_ON),
+            (states.POWER_ON, states.POWER_OFF),
+        ]
+
+        for target_state, final_state, expected_reset in success_scenarios:
+            mock_get_power_state.return_value = final_state
+
+            with task_manager.acquire(self.context, self.node.uuid,
+                                      shared=False) as task:
+                task.driver.power.set_power_state(task, target_state)
+
+                fake_system.reset_system.assert_called_with(expected_reset)
+                mock_get_power_state.assert_called_with(
+                    task.driver.power, task)
+
+            fake_system.reset_mock()
+            mock_get_power_state.reset_mock()
+
+        for target_state, actual_state in failure_scenarios:
+            mock_get_power_state.return_value = actual_state
+
+            with task_manager.acquire(self.context, self.node.uuid,
+                                      shared=False) as task:
+                self.assertRaises(
+                    sushy.exceptions.BadRequestError,
+                    task.driver.power.set_power_state, task, target_state)
+                mock_get_power_state.assert_called_with(
+                    task.driver.power, task)
+
+            fake_system.reset_mock()
+            mock_get_power_state.reset_mock()
+
     @mock.patch.object(redfish_mgmt.RedfishManagement, 'restore_boot_device',
                        autospec=True)
     @mock.patch.object(redfish_utils, 'get_system', autospec=True)
